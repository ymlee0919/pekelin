// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Accounts {
  userId      Int       @id @default(autoincrement()) @map("user_id")
  user        String    @unique
  name        String
  email       String    @unique
  password    String
  roleId      Int?
  Role        Roles?    @relation(fields: [roleId], references: [roleId], "user_roles")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at") @updatedAt

  @@map("accounts")
}

model Roles {
  roleId      Int             @id @default(autoincrement()) @map("role_id")
  role        String
  details     String
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime?       @updatedAt @map("updated_at")
  modules     SystemModule[]  @relation("permitions")
  user        Accounts[]      @relation("user_roles")

  @@map("roles")
}

model SystemModule {
  moduleId    Int     @id @default(autoincrement()) @map("module_id")
  module      String
  details     String
  roles       Roles[] @relation("permitions")

  @@map("modules")
}

model Categories {
  categoryId    Int @id @default(autoincrement()) @map("category_id")
  category      String
  description   String @default("No description")
  url           String
  icon          String
  remoteUrl     String @map("remote_url")
  expiry        Int

  Products      Products[]

  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")
  
  @@map("categories")
}

model Products {
  productId     Int   @id @default(autoincrement()) @map("product_id")
  categoryId    Int   @map("category_id")
  Category      Categories @relation(fields: [categoryId], references: [categoryId])
  name          String
  url           String
  basePrice     Int @default(0) @map("base_price")
  price         Int
  gender        String @default("M")
  image         String
  remoteUrl     String @map("remote_url")
  expiry        Int
  description   String?
  isBestSeller  Boolean @map("best_seller") @default(false)
  isNew         Boolean @map("is_new") @default(false)
  visible       Boolean @default(true)
  isSet         Boolean @map("is_set") @default(false)
  
  element1Id      Int? @map("product1_id")
  element2Id      Int? @map("product2_id")
  Element1        Products?  @relation("Product1Relation", fields: [element1Id], references: [productId])
  Element2        Products?  @relation("Product2Relation", fields: [element2Id], references: [productId])
  ProductsInSet1  Products[] @relation("Product1Relation")
  ProductsInSet2  Products[] @relation("Product2Relation")

  Features      ProductFeatures[]
  Variants      ProductVariants[]
  
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  @@map("products")
}

model ProductFeatures {
  featureId     Int   @id @default(autoincrement()) @map("feature_id")
  productId     Int   @map("product_id")
  Product       Products @relation(fields: [productId], references: [productId])
  title         String
  content       String

  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  @@map("product_features")
}

model ProductVariants {
  variantId     Int @id @default(autoincrement()) @map("variant_id")
  productId     Int @map("product_id")
  Product       Products @relation(fields: [productId], references: [productId])
  name          String
  description   String?
  image         String
  remoteUrl     String @map("remote_url")
  expiry        Int
  
  isBestSeller  Boolean @map("best_seller") @default(false)
  isNew         Boolean @map("is_new") @default(false)
  visible       Boolean @default(true)

  Features      VariantsFeatures[]

  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  @@map("product_variants")
}

model VariantsFeatures {
  featureId     Int   @id @default(autoincrement()) @map("feature_id")
  variantId     Int   @map("variant_id")
  Variants      ProductVariants @relation(fields: [variantId], references: [variantId])
  title         String
  content       String

  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  @@map("variants_features")
}

enum Status {
  READY
  SENT
  DONE
}

model ReviewLinks {
  linkId        Int     @id @default(autoincrement()) @map("link_id")
  url           String
  clientName    String  @map("client_name")
  place         String
  status        Status @default(READY)
  Review        Reviews?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  @@map("review_link")
}

model Reviews {
  reviewId      Int     @id @default(autoincrement()) @map("review_id")
  linkId        Int     @unique
  rate          Int
  comment       String
  Link          ReviewLinks @relation(fields: [linkId], references: [linkId])
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  @@map("review")
}

model Notifications {
  notificationId  Int     @id @default(autoincrement()) @map("notification_id")
  message         String
  wellRead        Boolean @default(false)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")

  @@map("notifications")
}

model Clients {
  clientId  Int      @id @default(autoincrement()) @map("client_id")
  name      String
  place     String
  phone     String?   // Optional field
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  orders    Orders[]

  @@map("clients")
}

enum OrderStatus {
  PENDING
  READY
  DELIVERED
}

model Orders {
  orderId      Int         @id @default(autoincrement()) @map("order_id")
  title        String
  details      String?
  note         String?
  productImage String?     @map("product_image")
  status       OrderStatus @default(PENDING)
  clientId     Int         @map("client_id")
  Client       Clients     @relation(fields: [clientId], references: [clientId])
  
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  
  @@map("orders")
}

